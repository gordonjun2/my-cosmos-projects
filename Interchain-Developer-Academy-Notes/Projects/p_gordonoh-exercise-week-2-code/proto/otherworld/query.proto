syntax = "proto3";
package b9lab.otherworld.otherworld;

import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
import "otherworld/params.proto";
import "otherworld/world_params.proto";
// this line is used by starport scaffolding # 1

option go_package = "github.com/b9lab/other-world/x/otherworld/types";

// Query defines the gRPC querier service.
service Query {
  // Parameters queries the parameters of the module.
  rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/b9lab/other-world/otherworld/params";
  }
  // Queries a WorldParams by index.
	rpc WorldParams(QueryGetWorldParamsRequest) returns (QueryGetWorldParamsResponse) {
		option (google.api.http).get = "/b9lab/other-world/otherworld/world_params";
	}
// this line is used by starport scaffolding # 2
}

// QueryParamsRequest is request type for the Query/Params RPC method.
message QueryParamsRequest {}

// QueryParamsResponse is response type for the Query/Params RPC method.
message QueryParamsResponse {
  // params holds all the parameters of this module.
  Params params = 1 [(gogoproto.nullable) = false];
}

message QueryGetWorldParamsRequest {}

message QueryGetWorldParamsResponse {
	WorldParams WorldParams = 1 [(gogoproto.nullable) = false];
}
// this line is used by starport scaffolding # 3
