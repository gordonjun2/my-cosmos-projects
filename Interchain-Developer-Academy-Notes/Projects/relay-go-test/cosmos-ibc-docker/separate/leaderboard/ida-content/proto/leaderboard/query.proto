syntax = "proto3";
package cosmonaut.leaderboard.leaderboard;

import "google/api/annotations.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
// this line is used by starport scaffolding # 1
import "leaderboard/board.proto";
import "leaderboard/player_info.proto";

option go_package = "github.com/cosmonaut/leaderboard/x/leaderboard/types";

// Query defines the gRPC querier service.
service Query {
    // this line is used by starport scaffolding # 2

	// Queries a board by index.
	rpc Board(QueryGetBoardRequest) returns (QueryGetBoardResponse) {
		option (google.api.http).get = "/cosmonaut/leaderboard/leaderboard/board/{index}";
	}

	// Queries a list of board items.
	rpc BoardAll(QueryAllBoardRequest) returns (QueryAllBoardResponse) {
		option (google.api.http).get = "/cosmonaut/leaderboard/leaderboard/board";
	}


	// Queries a playerInfo by index.
	rpc PlayerInfo(QueryGetPlayerInfoRequest) returns (QueryGetPlayerInfoResponse) {
		option (google.api.http).get = "/cosmonaut/leaderboard/leaderboard/playerInfo/{index}";
	}

	// Queries a list of playerInfo items.
	rpc PlayerInfoAll(QueryAllPlayerInfoRequest) returns (QueryAllPlayerInfoResponse) {
		option (google.api.http).get = "/cosmonaut/leaderboard/leaderboard/playerInfo";
	}

}

// this line is used by starport scaffolding # 3
message QueryGetBoardRequest {
	string index = 1;
}

message QueryGetBoardResponse {
	Board Board = 1;
}

message QueryAllBoardRequest {
	cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllBoardResponse {
	repeated Board Board = 1;
	cosmos.base.query.v1beta1.PageResponse pagination = 2;
}
message QueryGetPlayerInfoRequest {
	string index = 1;
}

message QueryGetPlayerInfoResponse {
	PlayerInfo PlayerInfo = 1;
}

message QueryAllPlayerInfoRequest {
	cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllPlayerInfoResponse {
	repeated PlayerInfo PlayerInfo = 1;
	cosmos.base.query.v1beta1.PageResponse pagination = 2;
}
